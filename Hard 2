Hard 2
You are given a string s. You can convert s to a palindrome by adding characters in front of it.Return the shortest palindrome you can find by performing this transformation.
CODE 
def shortest_palindrome(s):
    rev_s = s[::-1]
    combined = s + "#" + rev_s

    lps = [0] * len(combined)
    j = 0

    for i in range(1, len(combined)):
        while j > 0 and combined[i] != combined[j]:
            j = lps[j - 1]
        if combined[i] == combined[j]:
            j += 1
        lps[i] = j
    length = len(s) - lps[-1]
    palindrome_part = rev_s[:length]
    result = palindrome_part + s

    return result
s = input("Enter a string: ")
result = shortest_palindrome(s)
print(result)

LOGIC
The idea behind this algorithm is to create a new string combined by concatenating the original string s and its reverse rev_s. By finding the Longest Prefix Suffix (LPS) array for combined,determine the length of the longest suffix of rev_s that matches a prefix of s. The difference between the length of s and the last element of the LPS array gives you the length of the shortest palindrome.

ALGORITHM
Input:
1.A string s.
Output:
The shortest palindrome formed by adding characters in front of s.
1.Initialize a new string rev_s as the reverse of s.
2.Initialize a new string combined by concatenating s and rev_s, separated by a special character
3.Initialize a new array lps (Longest Prefix Suffix) of size equal to the length of combined.
4.Compute the LPS array for the combined string.
5.Extract the palindrome part from rev_s using slicing, considering the length obtained in step 5.
6.Construct the final palindrome by concatenating the extracted part with the original string s.
7.Return the constructed palindrome.
