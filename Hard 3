Hard 3

CODE
def count_digit_one(n):
    count = 0
    factor = 1
    i = 1

    while i <= n:
        divider = i * 10
        count += (n // divider) * i + min(max(n % divider - i + 1, 0), i)
        i *= 10

    return count
n = int(input("Enter a non-negative integer n: "))
result = count_digit_one(n)
print(result)

LOGIC
The logic is based on considering each digit place (ones, tens, hundreds, etc.) and calculating the occurrences of '1' at that place. It utilizes the fact that the number of occurrences of '1' at a particular place is influenced by the number of times the higher-order digits roll over
The formula (n // divider) * i + min(max(n % divider - i + 1, 0), i) handles the counting of '1' at the current digit place.

ALGORITHM
Input:
1.A non-negative integer n.
Output:

Count of occurrences of the digit '1' in the range from 1 to n.
1.Initialize count to 0, factor to 1, and i to 1.
2.Loop while i is less than or equal to n:
   a.Calculate divider as i * 10.
   b.Updatee count using the formula: (n // divider) * i + min(max(n % divider - i + 1, 0), i)
(n // divider) * i: Count the occurrences of '1' at the current digit place.
min(max(n % divider - i + 1, 0), i): Handle any remaining occurrences within the current digit place.
3.Multiply i by 10 to move to the next digit place.
4.Return the final count.
